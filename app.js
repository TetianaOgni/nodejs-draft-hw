const express = require('express')
const logger = require('morgan')//Модуль Morgan инструмент для логирования (записи информации о запросах и ответах HTTP) в Node.js приложениях.
// логи полезны для отслеживания работы вашего сервера, а также для выявления проблем и отладки при необходимости.

const cors = require('cors')//Cross-Origin Resource Sharing) - это механизм веб-безопасности, 
                           // который позволяет или ограничивает веб-приложениям выполнять запросы к ресурсам 
                          //  (например, изображениям, стилям, скриптам и данным API) на других доменах (или портах), 
                          // чем текущий домен, с которого была загружена веб-страница. 

require('dotenv').config() //пакет dotenv предоставляет удобный способ управления конфигурацией приложения, 
// путем определения переменных окружения в файле .env, который хранится в корне проекта.
//этот код загружает содержимое файла .env и делает переменные окружения, определенные в этом файле,
// доступными в приложении через объект process.env. Теперь можно обращаться к переменным окружения,
//  как, например, process.env.PORT или process.env.DB_URL.
// если .env не в корне проекта а напр в папке config, то лучше исп-ть такой код для доступа к перемен окружения:
//const configPath = path.join(__dirname, '..', 'config', '.env')
// console.log(require ('dotenv').config({path: configPath}))
// проверим что доступ работает:
// console.log(process.env.PORT)
// console.log(process.env.DB_HOST)

const authRouter = require('./routes/api/auth')//путь к файлу с маршрутизаторами аутентификации
const contactsRouter = require('./routes/api/contacts')//путь к файлу с маршрутизаторами для контактов

const app = express()//ф-я создает веб-сервер (арр - вебсервер)

const formatsLogger = app.get('env') === 'development' ? 'dev' : 'short'//определяется формат логирования 
// dev - формат журнала с цветовой кодировкой (по статусу запроса) зеленый- для кодов успеха,
// красный - для ошибок сервера, желтый-для ошибок клиента, бирюзового -для перенаправления кодов и неокрашенных информационных кодов
//:method :url :status :response-time ms - :res[content-length] те (POST /api/users/login 400 6.023 ms - 35)
app.use(logger(formatsLogger))//
app.use(cors())//мидлвара позволяет серверу обрабатывать запросы с других источников
// в кач аргумента корс получает конфигурационный объект со св-ми к-рыми можно точно настроить,
//  какие источники (домены), методы, заголовки и другие параметры будут разрешены 
// или запрещены при доступе к вашим ресурсам из других источников
// по умолчанию {
                //   origin: '*',  разрешен доступ со всех источников (доменов)
                //   methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',
                //   preflightContinue: false,
                //   optionsSuccessStatus: 204
              // }
app.use(express.json())//промежуточное ПО (middleware)для обработки данных в формате JSON 
//когда клиент отправляет POST или PUT запрос с данными в формате JSON, 
//это промежуточное ПО считывает данные из тела запроса, разбирает JSON
// и помещает их в свойство req.body.
// эта мидлвара не срабатывает кодга приходят данные в запросе с Content-Type не json
app.use(express.static('public'))//если мы хотим передавать файлы на фронтенд, исп-ем эту мидлвару, она указывает папку откуда можно отдавать файлы, 
// потому что по умолч бекенд воспринимает адрес с точкой и расширением 
// как статический файл к-рый нельзя отдавать 

app.use('/api/users', authRouter)
app.use('/api/contacts', contactsRouter)
 
app.use((req, res) => {  
  res.status(404).json({ message: 'Not found' })
})

app.use((err, req, res, next) => {
  const {status = 500, message = 'Server error'} = err
  res.status(status).json({ message, })
})

module.exports = app
